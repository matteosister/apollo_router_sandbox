{"engineConfig":{"defaultFlushInterval":"500","datasourceConfigurations":[{"kind":"GRAPHQL","rootNodes":[{"typeName":"Query","fieldNames":["add","quotes","quote"]},{"typeName":"Quote","fieldNames":["id","plateNumber","price"]}],"overrideFieldPathFromAlias":true,"customGraphql":{"fetch":{"url":{"staticVariableContent":"http://conversion:8080/graphql"},"method":"POST","body":{},"baseUrl":{},"path":{}},"subscription":{"enabled":true,"url":{"staticVariableContent":"http://conversion:8080/graphql"},"protocol":"GRAPHQL_SUBSCRIPTION_PROTOCOL_WS","websocketSubprotocol":"GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"},"federation":{"enabled":true,"serviceSdl":"type Query {\n\t\"\"\"\n\tReturns the sum of a and b\n\t\"\"\"\n\tadd(a: Int!, b: Int!): Int!\n\tquotes(ids: [ID!]!): [Quote!]!\n\tquote(id: ID!): Quote!\n}\ntype Quote @key(fields: \"id\") {\n\tid: ID!\n\tplateNumber: String!\n\tprice: Int!\n}\n"},"upstreamSchema":{"key":"d92cb80ca8b557923f37591da31686def65d47ae"}},"requestTimeoutSeconds":"10","id":"0","keys":[{"typeName":"Quote","selectionSet":"id"}]},{"kind":"GRAPHQL","rootNodes":[{"typeName":"Claim","fieldNames":["lost","id"],"externalFieldNames":["id"]},{"typeName":"Query","fieldNames":["subtract","commissions"]},{"typeName":"Quote","fieldNames":["commissions","id"],"externalFieldNames":["id"]}],"childNodes":[{"typeName":"Commission","fieldNames":["id","amount"]}],"overrideFieldPathFromAlias":true,"customGraphql":{"fetch":{"url":{"staticVariableContent":"http://pricing:8081/graphql"},"method":"POST","body":{},"baseUrl":{},"path":{}},"subscription":{"enabled":true,"url":{"staticVariableContent":"http://pricing:8081/graphql"},"protocol":"GRAPHQL_SUBSCRIPTION_PROTOCOL_WS","websocketSubprotocol":"GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"},"federation":{"enabled":true,"serviceSdl":"extend type Claim @key(fields: \"id\") {\n\tid: ID! @external\n\tlost: Int!\n}\ntype Commission {\n\tid: ID!\n\tamount: Int!\n}\ntype Query {\n\t\"\"\"\n\tReturns the sum of a and b\n\t\"\"\"\n\tsubtract(a: Int!, b: Int!): Int!\n\tcommissions: [Commission!]!\n}\nextend type Quote @key(fields: \"id\") {\n\tid: ID! @external\n\tcommissions: Commission!\n}\n"},"upstreamSchema":{"key":"02682d88ff0091d9ba3323883aaf38bcae687785"}},"requestTimeoutSeconds":"10","id":"1","keys":[{"typeName":"Claim","selectionSet":"id"},{"typeName":"Quote","selectionSet":"id"}]},{"kind":"GRAPHQL","rootNodes":[{"typeName":"Claim","fieldNames":["id","vehicle","paid"]},{"typeName":"Quote","fieldNames":["claims","_resolveReference","id"],"externalFieldNames":["id"]},{"typeName":"Query","fieldNames":["multiply","claim"]}],"overrideFieldPathFromAlias":true,"customGraphql":{"fetch":{"url":{"staticVariableContent":"http://claims:8082/graphql"},"method":"POST","body":{},"baseUrl":{},"path":{}},"subscription":{"enabled":true,"url":{"staticVariableContent":"http://claims:8082/graphql"},"protocol":"GRAPHQL_SUBSCRIPTION_PROTOCOL_WS","websocketSubprotocol":"GRAPHQL_WEBSOCKET_SUBPROTOCOL_AUTO"},"federation":{"enabled":true,"serviceSdl":"\"Represents a schema\"\nschema {\n  query: RootQueryType\n}\n\ntype Claim @key(fields: \"id\") {\n  id: ID!\n  vehicle: String\n  paid: Int\n}\n\ntype _Service {\n  sdl: String\n}\n\n\"a union of all types that use the @key directive\"\nunion _Entity = Quote | Claim\n\n\"Quote\"\ntype Quote @extends @key(fields: \"id\") {\n  id: ID! @external\n  claims: [Claim]\n  _resolveReference: Quote\n}\n\ntype RootQueryType {\n  \"\"\"\n  The _service field on the query root returns SDL\n  which includes all of the service's types (after any non-federation transforms),\n  as well as federation directive annotations on the fields and types.\n  The federation schema modifications (i.e. new types and directive definitions)\n  should not be included in this SDL.\n  \"\"\"\n  _service: _Service!\n\n  \"\"\"\n  Returns a non-nullable list of _Entity types\n  and have a single argument with an argument name of representations\n  and type [_Any!]! (non-nullable list of non-nullable _Any scalars).\n  The _entities field on the query root must allow a list of _Any scalars\n  which are \"representations\" of entities from external services.\n  These representations should be validated with the following rules:\n\n  - Any representation without a __typename: String field is invalid.\n  - Representations must contain at least the fields defined in the fieldset of a @key directive on the base type.\n  \"\"\"\n  _entities(representations: [_Any!]!): [_Entity]!\n\n  multiply(a: Int!, b: Int!): Int!\n\n  claim(id: ID!): Claim!\n}\n\n\"The _Any scalar is used to pass representations of entities from external services into the root _entities field for execution.\"\nscalar _Any\n"},"upstreamSchema":{"key":"990be121d12e4ca8f42ea3f17e408f4fcd419a9f"}},"requestTimeoutSeconds":"10","id":"2","keys":[{"typeName":"Claim","selectionSet":"id"},{"typeName":"Quote","selectionSet":"id"}]}],"fieldConfigurations":[{"typeName":"Query","fieldName":"add","argumentsConfiguration":[{"name":"a","sourceType":"FIELD_ARGUMENT"},{"name":"b","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"quotes","argumentsConfiguration":[{"name":"ids","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"quote","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"subtract","argumentsConfiguration":[{"name":"a","sourceType":"FIELD_ARGUMENT"},{"name":"b","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"multiply","argumentsConfiguration":[{"name":"a","sourceType":"FIELD_ARGUMENT"},{"name":"b","sourceType":"FIELD_ARGUMENT"}]},{"typeName":"Query","fieldName":"claim","argumentsConfiguration":[{"name":"id","sourceType":"FIELD_ARGUMENT"}]}],"graphqlSchema":"schema {\n  query: Query\n}\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Query {\n  \"\"\"Returns the sum of a and b\"\"\"\n  add(a: Int!, b: Int!): Int!\n  quotes(ids: [ID!]!): [Quote!]!\n  quote(id: ID!): Quote!\n  \"\"\"Returns the sum of a and b\"\"\"\n  subtract(a: Int!, b: Int!): Int!\n  commissions: [Commission!]!\n  multiply(a: Int!, b: Int!): Int!\n  claim(id: ID!): Claim!\n}\n\n\"\"\"Quote\"\"\"\ntype Quote {\n  id: ID!\n  plateNumber: String!\n  price: Int!\n  commissions: Commission!\n  claims: [Claim]\n  _resolveReference: Quote\n}\n\ntype Claim {\n  id: ID!\n  lost: Int!\n  vehicle: String\n  paid: Int\n}\n\ntype Commission {\n  id: ID!\n  amount: Int!\n}","stringStorage":{"d92cb80ca8b557923f37591da31686def65d47ae":"schema {\n  query: Query\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Query {\n  \"\"\"Returns the sum of a and b\"\"\"\n  add(a: Int!, b: Int!): Int!\n  quote(id: ID!): Quote!\n  quotes(ids: [ID!]!): [Quote!]!\n}\n\ntype Quote @key(fields: \"id\") {\n  id: ID!\n  plateNumber: String!\n  price: Int!\n}\n\nscalar openfed__FieldSet","02682d88ff0091d9ba3323883aaf38bcae687785":"schema {\n  query: Query\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Claim @key(fields: \"id\") {\n  id: ID! @external\n  lost: Int!\n}\n\ntype Commission {\n  amount: Int!\n  id: ID!\n}\n\ntype Query {\n  commissions: [Commission!]!\n  \"\"\"Returns the sum of a and b\"\"\"\n  subtract(a: Int!, b: Int!): Int!\n}\n\ntype Quote @key(fields: \"id\") {\n  commissions: Commission!\n  id: ID! @external\n}\n\nscalar openfed__FieldSet","990be121d12e4ca8f42ea3f17e408f4fcd419a9f":"\"\"\"Represents a schema\"\"\"\nschema {\n  query: RootQueryType\n}\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Claim @key(fields: \"id\") {\n  id: ID!\n  paid: Int\n  vehicle: String\n}\n\n\"\"\"Quote\"\"\"\ntype Quote @extends @key(fields: \"id\") {\n  _resolveReference: Quote\n  claims: [Claim]\n  id: ID! @external\n}\n\ntype RootQueryType {\n  claim(id: ID!): Claim!\n  multiply(a: Int!, b: Int!): Int!\n}\n\nscalar openfed__FieldSet"}},"version":"f698d0c6-3287-48dd-bdba-dec42163c6bc","subgraphs":[{"id":"0","name":"quotes","routingUrl":"http://conversion:8080/graphql"},{"id":"1","name":"pricing","routingUrl":"http://pricing:8081/graphql"},{"id":"2","name":"claims","routingUrl":"http://claims:8082/graphql"}]}
